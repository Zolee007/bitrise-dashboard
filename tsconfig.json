{
  "compilerOptions": {
    /* Target module options */
    "target": "es6" /* Specify ECMAScript target version: 'ES3' (default), 'ES5', 'ES6' / 'ES2015', 'ES2016', 'ES2017', 'ES2018', 'ES2019', 'ES2020' or 'ESNEXT'. */,
    "lib": ["dom", "dom.iterable", "esnext"] /* List of library files to be included in the compilation. */,
    "module": "esnext" /* Specify module code generation (such as with transpileModule or @babel/plugin-transform-typescript) would be safe. */,
    "moduleResolution": "node" /* Determine how modules get resolved */,
    "isolatedModules": true /* Perform additional checks to ensure that separate compilation */,
    "resolveJsonModule": true /* Include modules imported with .json extension. */,
    // "allowUmdGlobalAccess": false /* Allow accessing UMD globals from modules. */,
    // "downlevelIteration": false /* Provide full support for iterables in for..of, spread and destructuring when targeting ES5 or ES3. */,

    /* JS options */
    "allowJs": true /* Allow JavaScript files to be compiled. */,
    "allowSyntheticDefaultImports": true /* Allow default imports from modules with no default export. This does not affect code emit, just typechecking. */,
    "checkJs": true /* Report errors in .js files. Use in conjunction with --allowJs. */,
    "esModuleInterop": true /* Emit __importStar and __importDefault helpers for runtime babel ecosystem compatibility and enable --allowSyntheticDefaultImports for typesystem compatibility. */,
    // "disableSizeLimit": false /* Disable size limitation on JavaScript project. */,
    // "maxNodeModuleJsDepth": 0 /* The maximum dependency depth to search under node_modules and load JavaScript files. Only applicable with --allowJs. */,

    /* Typescript @types */
    /* .d.ts file options */
    "skipLibCheck": true /* Skip type checking of all declaration files (*.d.ts). */,
    // "declaration": false /* Generates corresponding .d.ts file. */,
    // "declarationDir": "" /* Output directory for generated declaration files. */,
    // "declarationMap": false /* Generates a sourcemap for each corresponding ‘.d.ts’ file. */,
    // "emitDeclarationOnly": false /* Only emit ‘.d.ts’ declaration files. */,
    // "noLib": false /* Do not include the default library file (lib.d.ts). */,
    // "types": [] /* List of names of type definitions to include.  */,
    "typeRoots": ["src/types", "node_modules/@types"] /* List of folders to include type definitions from. */,

    /* React options */
    "jsx": "react" /* Support JSX in .tsx files: "react", "preserve", "react-native". See JSX. */,
    // "jsxFactory": "React.createElement" /* Specify the JSX factory function to use when targeting react JSX emit, e.g. React.createElement or h. */,

    /* Char output */
    // "charset": "utf8" /* The character set of the input files. */,
    // "emitBOM": false /* Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files. */,
    // "newLine": "crlf" /* Use the specified end of line sequence to be used when emitting files: "crlf" (windows) or "lf" (unix).” */,

    /* Directories and paths */
    "baseUrl": "src" /* Base directory to resolve non-relative module names. */,
    // "paths": {} /* List of path mapping entries for module names to locations relative to the baseUrl. */,
    "forceConsistentCasingInFileNames": true /* Disallow inconsistently-cased references to the same file. */,
    // "outDir": "" /* Redirect output structure to the directory. */,
    // "outFile": "" /* Concatenate and emit output to single file. The order of concatenation is determined by the list of files passed to the compiler on the command line along with triple-slash references and imports. */,
    // "rootDir": "" /* Specifies the root directory of input files. Only use to control the output directory structure with --outDir. */,
    // "rootDirs": [] /* List of root folders whose combined content represent the structure of the project at runtime. */,

    /* Source map */
    // "inlineSourceMap": false /* Emit a single file with source maps instead of having a separate file. */,
    // "inlineSources": false /* Emit the source alongside the sourcemaps within a single file; requires --inlineSourceMap or --sourceMap to be set. */,
    // "mapRoot": "" /* Specifies the location where debugger should locate map files instead of generated locations. */,
    // "sourceMap": false /* Generates corresponding .map file. */,
    // "sourceRoot": "" /* Specifies the location where debugger should locate TypeScript files instead of source locations. Use this flag if the sources will be located at run-time in a different location than that at design-time. The location specified will be embedded in the sourceMap to direct the debugger where the source files will be located. */,

    /* Code checks */
    /* Enable all strict type checking options.
      Enabling --strict enables
        --noImplicitAny,
        --noImplicitThis,
        --alwaysStrict,
        --strictBindCallApply,
        --strictNullChecks,
        --strictFunctionTypes
        --strictPropertyInitialization.
    */
    "strict": true,
    /* overrode by strict */
    // "alwaysStrict": false /* Parse in strict mode and emit "use strict" for each source file */,
    // "noImplicitAny": false /* Raise error on expressions and declarations with an implied any type. */,
    // "noImplicitThis": false /* Raise error on this expressions with an implied any type. */,
    // "strictBindCallApply": false /* Enable stricter checking of the bind, call, and apply methods on functions. */,
    // "strictFunctionTypes": false /* Disable bivariant parameter checking for function types. */,
    // "strictPropertyInitialization": false /* Ensure non-undefined class properties are initialized in the constructor. This option requires --strictNullChecks be enabled in order to take effect. */,
    // "strictNullChecks": false /* In strict null checking mode, the null and undefined values are not in the domain of every type and are only assignable to themselves and any (the one exception being that undefined is also assignable to void). */,

    // "allowUnreachableCode": false /* Do not report errors on unreachable code. */,
    // "allowUnusedLabels": false /* Do not report errors on unused labels. */,
    // "keyofStringsOnly": false /* Resolve keyof to string valued property names only (no numbers or symbols). */,
    // "useDefineForClassFields": false /* Emit class fields with ECMAScript-standard semantics. */,
    "noFallthroughCasesInSwitch": true /* Report errors for fallthrough cases in switch statement. */,
    "noImplicitReturns": true /* Report an error when not all code paths in function return a value. */,
    // "noImplicitUseStrict": false /* Do not emit "use strict" directives in module output. */,
    // "noResolve": false /* Do not add triple-slash references or module import targets to the list of compiled files. */,
    // "noStrictGenericChecks": false /* Disable strict checking of generic signatures in function types. */,
    "noUnusedLocals": true /* Report errors on unused locals. */,
    "noUnusedParameters": true /* Report errors on unused parameters. */,
    // "preserveConstEnums": false /* Do not erase const enum declarations in generated code. */,
    // "preserveSymlinks": false /* Do not resolve symlinks to their real path; treat a symlinked file like a real one. */,
    // "preserveWatchOutput": false /* Keep outdated console output in watch mode instead of clearing the screen */,
    // "removeComments": false /* Remove all comments except copy-right header comments beginning with /*! */,
    // "suppressExcessPropertyErrors": false /* Suppress excess property checks for object literals. */,
    // "suppressImplicitAnyIndexErrors": false /* Suppress --noImplicitAny errors for indexing objects lacking index signatures. */,

    /* Decoractors */
    // "emitDecoratorMetadata": false /* Emit design-type metadata for decorated declarations in source. */,
    // "experimentalDecorators": false /* Enables experimental support for ES decorators. */,

    /* Helpers */
    // "importHelpers": false /* Import emit helpers (e.g. __extends, __rest, etc..) from tslib */,
    // "noEmitHelpers": false /* Do not generate custom helper functions like __extends in compiled output. */,

    /* Build options */
    // "build": false /* Builds this project and all of its dependencies specified by Project References. Note that this flag is not compatible with others on this page. */,
    // "composite": true /* Ensure TypeScript can determine where to find the outputs of the referenced project to compile project. */,
    // "incremental: true /* Enable incremental compilation by reading/writing information from prior compilations to a file on disk. This file is controlled by the --tsBuildInfoFile flag. */,
    // "project": "" /* Compile a project given a valid configuration file. The argument can be a file path to a valid JSON configuration file, or a directory path to a directory containing a tsconfig.json file. */,
    // "tsBuildInfoFile": .tsbuildinfo /* Specify what file to store incremental build information in. */,

    /* Disagnostics */
    // "diagnostics: false /* Show diagnostic information. */,
    // "extendedDiagnostics": false /* Show verbose diagnostic information */,

    /* Print options */
    // "generateCpuProfile": profile.cpuprofile /* Generates a cpu profile at the given path. Passing an existing directory name instead of a file path will cause a timestamp-named profile to be generated in that directory instead. */,
    "noEmit": true /* Do not emit outputs. */
    // "listEmittedFiles": false /* Print names of generated files part of the compilation. */,
    // "listFiles": false /* Print names of files part of the compilation. */,
    // "locale": en-us /* The locale to use to show error messages */,
    // "noEmitOnError": false /* Do not emit outputs if any errors were reported. */,
    // "noErrorTruncation": false /* Do not truncate error messages. */,
    // "pretty": true /* Stylize errors and messages using color and context. */,
    // "showConfig": false /* Rather than actually execute a build with the other input options and config files, show the final implied config file in the output. */,
    // "traceResolution": false /* Report module resolution log messages. */,
  },
  "include": ["src", "public"],
  "exclude": ["node_modules", "build", ".vscode"]
}
